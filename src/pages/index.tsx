import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { FC, useState } from "react";
import { Button } from "~/components/Button";
import { Input } from "~/components/Input";
import { Label } from "~/components/Label";
import { Loading } from "~/components/Loading";
import { DefaultLayout } from "~/templates/Default";

import { api, RouterOutputs } from "~/utils/api";
import { intlCurrency } from "~/utils/intl";

const Home: NextPage = () => {
  const [page, setPage] = useState(1);
  const [term, setTerm] = useState("");

  const searchQuery = api.product.search.useQuery({
    limit: 12,
    page,
    term,
  });

  const handleNext = () => setPage((prev) => prev + 1);
  const handlePrev = () => setPage((prev) => Math.max(1, prev - 1));

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <DefaultLayout>
        <div className="px-4 py-6 sm:px-0">
          <div className="bg-white">
            <div className="mx-auto max-w-2xl px-4 pt-4 pb-16  sm:px-6 lg:max-w-7xl lg:px-8">
              <Label htmlFor="term">Termo de Busca</Label>
              <Input
                id="term"
                value={term}
                onChange={(e) => setTerm(e.target.value)}
              />

              {searchQuery.isLoading && (
                <section className="pt-4">
                  <Loading />
                </section>
              )}
              {searchQuery.data && (
                <div className="mt-8 grid grid-cols-1 gap-y-12 sm:grid-cols-2 sm:gap-x-6 lg:grid-cols-3 xl:gap-x-8">
                  {searchQuery.data.map((product) => (
                    <ProductCard
                      key={[product.id, product.origin].join("-")}
                      {...product}
                    />
                  ))}
                </div>
              )}
            </div>

            <nav
              className="flex items-center justify-between  border-t border-gray-200 bg-white px-4 py-3 sm:px-6"
              aria-label="Pagination"
            >
              <div className="flex flex-1 justify-between gap-4 sm:justify-end">
                <Button
                  disabled={searchQuery.isLoading}
                  // className="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50"
                  variant={"subtle"}
                  onClick={handlePrev}
                >
                  Anterior
                </Button>
                <Button
                  disabled={searchQuery.isLoading}
                  // className="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50"
                  variant={"subtle"}
                  onClick={handleNext}
                >
                  Pr√≥xima
                </Button>
              </div>
            </nav>
          </div>
        </div>
      </DefaultLayout>
    </>
  );
};

const ProductCard: FC<RouterOutputs["product"]["search"][number]> = (props) => {
  return (
    <>
      <div className="group relative flex flex-col overflow-hidden rounded-lg border border-gray-200 bg-white">
        <div className="aspect-w-3 aspect-h-4 bg-gray-200 sm:aspect-none group-hover:opacity-75 sm:h-96">
          <img
            src={props.thumbnail}
            alt={props.name}
            className="h-full w-full object-cover object-center sm:h-full sm:w-full"
          />
        </div>
        <div className="flex flex-1 flex-col space-y-2 p-4">
          <h3 className="text-sm font-medium text-gray-900">
            <Link href={[props.origin.substring(0, 1), props.id].join("/")}>
              <span aria-hidden="true" className="absolute inset-0" />
              {props.name}
            </Link>
          </h3>
          <p className="text-sm text-gray-500">{props.description}</p>
          <div className="flex flex-1 flex-col justify-end">
            <p className="text-sm italic text-gray-500">
              {props.discount ? intlCurrency(props.price) : null}
            </p>
            <p className="text-base font-medium text-gray-900">
              {intlCurrency(
                props.discount ? props.discount_price : props.price
              )}
            </p>
          </div>
        </div>
      </div>
    </>
  );
};

export default Home;
